# visual_graph.py
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
import pickle
import argparse
import os

# üî• –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CustomFocalLoss –∏ XLSTMLayer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
from train_model import CustomFocalLoss
from models.xlstm_memory_cell import XLSTMLayer
from models.xlstm_rl_model import XLSTMRLModel # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–æ–¥–µ–ª–∏

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ config.py –¥–æ—Å—Ç—É–ø–µ–Ω
try:
    import config
except ImportError:
    print("‚ö†Ô∏è config.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    class Config:
        SEQUENCE_LENGTH = 60
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
    config = Config

def plot_predictions(symbol_df, model, scaler, feature_cols, sequence_length):
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ BUY/SELL/HOLD.
    """
    if symbol_df.empty:
        print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol_df['symbol'].iloc[0]}")
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    X_predict = []
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ DataFrame –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    if len(symbol_df) < sequence_length:
        print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(symbol_df)} —Å—Ç—Ä–æ–∫) –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª–∏–Ω–æ–π {sequence_length}.")
        return

    for i in range(len(symbol_df) - sequence_length):
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ 'close'
        X_predict.append(symbol_df.iloc[i:i + sequence_length][['close']].values)
    
    if not X_predict:
        print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
        return

    X_predict = np.array(X_predict, dtype=np.float32)
    X_predict = np.nan_to_num(X_predict, nan=0.0, posinf=0.0, neginf=0.0)

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    X_predict_reshaped = X_predict.reshape(-1, X_predict.shape[-1])
    X_predict_scaled = scaler.transform(X_predict_reshaped).reshape(X_predict.shape)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    raw_predictions = model.predict(X_predict_scaled, verbose=0)
    predicted_classes = np.argmax(raw_predictions, axis=1)

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    # –ò–Ω–¥–µ–∫—Å—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    prediction_df = pd.DataFrame({
        'predicted_class': predicted_classes,
        'buy_prob': raw_predictions[:, 0],
        'sell_prob': raw_predictions[:, 1],
        'hold_prob': raw_predictions[:, 2]
    }, index=symbol_df.index[sequence_length:]) # –ò–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º —Å–≤–µ—á–∞–º

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º DataFrame
    plot_df = symbol_df.loc[prediction_df.index].copy()
    plot_df = pd.concat([plot_df, prediction_df], axis=1)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(18, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
    plt.plot(plot_df.index, plot_df['close'], label='–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è', color='blue', alpha=0.7)

    # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è BUY
    buy_signals = plot_df[plot_df['predicted_class'] == 0]
    plt.scatter(buy_signals.index, buy_signals['close'], marker='^', color='green', s=100, label='BUY (–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)', alpha=0.8)

    # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è SELL
    sell_signals = plot_df[plot_df['predicted_class'] == 1]
    plt.scatter(sell_signals.index, sell_signals['close'], marker='v', color='red', s=100, label='SELL (–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)', alpha=0.8)

    # –û—Ç–º–µ—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ BUY/SELL —Å–∏–≥–Ω–∞–ª—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö)
    # (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 'target' –∫–æ–ª–æ–Ω–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ feature_engineering)
    if 'target' in plot_df.columns:
        real_buy_signals = plot_df[plot_df['target'] == 0]
        plt.scatter(real_buy_signals.index, real_buy_signals['close'], marker='^', color='lime', s=200, facecolors='none', edgecolors='lime', label='BUY (–†–µ–∞–ª—å–Ω—ã–π)', alpha=0.8)
        
        real_sell_signals = plot_df[plot_df['target'] == 1]
        plt.scatter(real_sell_signals.index, real_sell_signals['close'], marker='v', color='darkred', s=200, facecolors='none', edgecolors='darkred', label='SELL (–†–µ–∞–ª—å–Ω—ã–π)', alpha=0.8)


    plt.title(f'–ü—Ä–æ–≥–Ω–æ–∑ xLSTM –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol_df["symbol"].iloc[0]}')
    plt.xlabel('–ò–Ω–¥–µ–∫—Å —Å–≤–µ—á–∏')
    plt.ylabel('–¶–µ–Ω–∞')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(f'predictions_graph_{symbol_df["symbol"].iloc[0]}.png')
    plt.show()

def main():
    parser = argparse.ArgumentParser(description='–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π xLSTM –º–æ–¥–µ–ª–∏.')
    parser.add_argument('--data', type=str, default='historical_data.csv', help='–ü—É—Ç—å –∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º.')
    parser.add_argument('--model_path', type=str, default='models/xlstm_rl_model.keras', help='–ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ xLSTM.')
    parser.add_argument('--scaler_path', type=str, default='models/xlstm_rl_scaler.pkl', help='–ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Å–∫–µ–π–ª–µ—Ä—É.')
    parser.add_argument('--symbol', type=str, default='BTCUSDT', help='–°–∏–º–≤–æ–ª –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT).')
    args = parser.parse_args()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Å–∫–µ–π–ª–µ—Ä–∞
    try:
        # üî• –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º custom_objects –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª–æ–µ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å
        model = tf.keras.models.load_model(args.model_path, custom_objects={'XLSTMLayer': XLSTMLayer, 'CustomFocalLoss': CustomFocalLoss})
        with open(args.scaler_path, 'rb') as f:
            scaler = pickle.load(f)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∏ —Å–∫–µ–π–ª–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Å–∫–µ–π–ª–µ—Ä–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        full_df = pd.read_csv(args.data)
        symbol_df = full_df[full_df['symbol'] == args.symbol].copy()
        
        if symbol_df.empty:
            print(f"–°–∏–º–≤–æ–ª {args.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ Feature Engineering, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
        from feature_engineering import calculate_features, detect_candlestick_patterns, prepare_xlstm_rl_features
        
        # üî• –£–ü–†–û–©–ï–ù–û: –î–ª—è 'close only' feature_cols –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç ['close']
        feature_cols = ['close']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        processed_df = symbol_df.copy() # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º, –±–µ–∑ calculate_features –∏ detect_candlestick_patterns
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å 'close' –∏ –Ω–µ—Ç NaN
        processed_df.dropna(subset=['close'], inplace=True)
        processed_df.reset_index(drop=True, inplace=True)

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è {args.symbol} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –°—Ç—Ä–æ–∫: {len(processed_df)}")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        plot_predictions(processed_df, model, scaler, feature_cols, config.SEQUENCE_LENGTH)

    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö '{args.data}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()