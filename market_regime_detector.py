import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import pickle
import os

class MarketRegimeDetector:
    """
    –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    """
    
    def __init__(self, lookback_period=50):
        self.lookback_period = lookback_period
        self.scaler = StandardScaler()
        self.kmeans = KMeans(n_clusters=4, random_state=42, n_init=10)  # n_init to avoid warning
        self.is_fitted = False
        self.xlstm_model = None
        self.xlstm_feature_columns = None
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        self.regime_names = {
            0: 'TRENDING_UP',
            1: 'TRENDING_DOWN', 
            2: 'SIDEWAYS_HIGH_VOL',
            3: 'SIDEWAYS_LOW_VOL'
        }

    def set_xlstm_context(self, xlstm_model, xlstm_feature_columns):
        self.xlstm_model = xlstm_model
        self.xlstm_feature_columns = xlstm_feature_columns
        print("‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤ –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç xLSTM")
    
    def extract_regime_features(self, df):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
        
        # –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        df['returns'] = df['close'].pct_change()
        df['volatility'] = df['returns'].rolling(20).std()
        df['trend_strength'] = df['close'].rolling(20).apply(lambda x: (x.iloc[-1] - x.iloc[0]) / x.iloc[0] if x.iloc[0] != 0 else 0)
        
        # –û–±—ä–µ–º–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        df['volume_trend'] = df['volume'].rolling(10).mean() / df['volume'].rolling(30).mean()
        df['volume_volatility'] = df['volume'].rolling(20).std() / df['volume'].rolling(20).mean()
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        df['rsi_regime'] = np.where(df['RSI_14'] > 70, 1, np.where(df['RSI_14'] < 30, -1, 0))
        df['bb_position'] = (df['close'] - df['BBL_20_2.0']) / (df['BBU_20_2.0'] - df['BBL_20_2.0'])
        
        # VSA —Ä–µ–∂–∏–º–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        df['vsa_activity'] = df['vsa_strength'].rolling(10).std()
        df['vsa_direction'] = df['vsa_strength'].rolling(10).mean()
        
        regime_features = [
            'volatility', 'trend_strength', 'volume_trend', 'volume_volatility',
            'rsi_regime', 'bb_position', 'vsa_activity', 'vsa_direction'
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º xLSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞–∫ —Ñ–∏—á–∏ —Ä–µ–∂–∏–º–∞
        if self.xlstm_model and self.xlstm_feature_columns and len(df) >= self.xlstm_model.input_shape[1]:
            xlstm_preds = []
            sequence_length = self.xlstm_model.input_shape[1]
            for i in range(len(df) - sequence_length + 1):
                sequence_data = df.iloc[i : i + sequence_length][self.xlstm_feature_columns].values
                sequence_reshaped = sequence_data.reshape(1, sequence_length, len(self.xlstm_feature_columns))
                xlstm_preds.append(self.xlstm_model.predict(sequence_reshaped)[0])
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –≤ –Ω–∞—á–∞–ª–µ, —á—Ç–æ–±—ã –≤—ã—Ä–æ–≤–Ω—è—Ç—å –¥–ª–∏–Ω—É
            df['xlstm_buy_pred'] = np.nan
            df['xlstm_sell_pred'] = np.nan
            df['xlstm_hold_pred'] = np.nan
            
            # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å –∏–Ω–¥–µ–∫—Å–∞, –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            start_idx = sequence_length - 1
            df.loc[start_idx:, 'xlstm_buy_pred'] = [p[0] for p in xlstm_preds]
            df.loc[start_idx:, 'xlstm_sell_pred'] = [p[1] for p in xlstm_preds]
            df.loc[start_idx:, 'xlstm_hold_pred'] = [p[2] for p in xlstm_preds]

            regime_features.extend(['xlstm_buy_pred', 'xlstm_sell_pred', 'xlstm_hold_pred'])
        
        return df.dropna(subset=regime_features)
    
    def fit(self, df):
        """–û–±—É—á–∞–µ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        features_df = self.extract_regime_features(df)
        if len(features_df) < self.lookback_period:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        features_to_scale = [
            'volatility', 'trend_strength', 'volume_trend', 'volume_volatility',
            'rsi_regime', 'bb_position', 'vsa_activity', 'vsa_direction'
        ]
        if 'xlstm_buy_pred' in features_df.columns:
            features_to_scale.extend(['xlstm_buy_pred', 'xlstm_sell_pred', 'xlstm_hold_pred'])

        features_scaled = self.scaler.fit_transform(features_df[features_to_scale])
        self.kmeans.fit(features_scaled)
        self.is_fitted = True
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        labels = self.kmeans.labels_
        self.analyze_clusters(features_df, labels)
        
        print("‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –æ–±—É—á–µ–Ω")
        return self
    
    def analyze_clusters(self, features_df, labels):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
        
        print("\nüìä –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–´–• –†–ï–ñ–ò–ú–û–í:")
        print("-" * 50)
        
        for cluster in range(4):
            cluster_data = features_df[labels == cluster]
            if len(cluster_data) > 0:
                avg_volatility = cluster_data['volatility'].mean()
                avg_trend = cluster_data['trend_strength'].mean()
                avg_vsa_activity = cluster_data['vsa_activity'].mean()
                
                print(f"\n–†–µ–∂–∏–º {cluster} ({self.regime_names.get(cluster, 'UNKNOWN')}):")
                print(f"  - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {avg_volatility:.4f}")
                print(f"  - –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {avg_trend:.4f}")
                print(f"  - VSA –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {avg_vsa_activity:.4f}")
                print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(cluster_data)}")
    
    def predict_regime(self, df):
        """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º"""
        
        if not self.is_fitted:
            raise ValueError("–î–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—É—á–µ–Ω –ø–µ—Ä–µ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º")
        
        features_df = self.extract_regime_features(df)
        if len(features_df) == 0:
            return 'UNKNOWN', 0.0
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        features_to_predict = [
            'volatility', 'trend_strength', 'volume_trend', 'volume_volatility',
            'rsi_regime', 'bb_position', 'vsa_activity', 'vsa_direction'
        ]
        if 'xlstm_buy_pred' in features_df.columns:
            features_to_predict.extend(['xlstm_buy_pred', 'xlstm_sell_pred', 'xlstm_hold_pred'])
        
        latest_features = features_df.iloc[-1:][features_to_predict].values
        features_scaled = self.scaler.transform(latest_features)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
        regime_id = self.kmeans.predict(features_scaled)[0]
        regime_name = self.regime_names.get(regime_id, 'UNKNOWN')
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞)
        distances = self.kmeans.transform(features_scaled)[0]
        confidence = 1.0 - (distances[regime_id] / distances.sum()) if distances.sum() > 0 else 0
        
        return regime_name, confidence
    
    def get_regime_trading_params(self, regime_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞"""
        
        params = {
            'TRENDING_UP': {
                'confidence_threshold': 0.5,
                'take_profit': 2.0,
                'stop_loss': -1.0,
                'position_size_multiplier': 1.2
            },
            'TRENDING_DOWN': {
                'confidence_threshold': 0.5,
                'take_profit': 2.0,
                'stop_loss': -1.0,
                'position_size_multiplier': 1.2
            },
            'SIDEWAYS_HIGH_VOL': {
                'confidence_threshold': 0.7,
                'take_profit': 1.0,
                'stop_loss': -1.5,
                'position_size_multiplier': 0.8
            },
            'SIDEWAYS_LOW_VOL': {
                'confidence_threshold': 0.8,
                'take_profit': 0.8,
                'stop_loss': -0.8,
                'position_size_multiplier': 0.6
            }
        }
        
        return params.get(regime_name, params['SIDEWAYS_LOW_VOL'])

    def save_detector(self, path='models/market_regime_detector.pkl'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤"""
        os.makedirs(os.path.dirname(path), exist_ok=True)
        detector_data = {
            'scaler': self.scaler,
            'kmeans': self.kmeans,
            'is_fitted': self.is_fitted,
            'lookback_period': self.lookback_period
        }
        with open(path, 'wb') as f:
            pickle.dump(detector_data, f)
        print(f"‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {path}")
    
    def load_detector(self, path='models/market_regime_detector.pkl'):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤"""
        with open(path, 'rb') as f:
            detector_data = pickle.load(f)
        
        self.scaler = detector_data['scaler']
        self.kmeans = detector_data['kmeans']
        self.is_fitted = detector_data['is_fitted']
        self.lookback_period = detector_data['lookback_period']
        print(f"‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω: {path}")