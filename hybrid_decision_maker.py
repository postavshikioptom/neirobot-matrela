import numpy as np
import pandas as pd
from models.xlstm_rl_model import XLSTMRLModel
from rl_agent import IntelligentRLAgent
from market_regime_detector import MarketRegimeDetector

class HybridDecisionMaker:
    """
    –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ä–µ—à–µ–Ω–∏—è —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–∞–º
    """
    
    def __init__(self, xlstm_model_path, rl_agent_path, feature_columns, sequence_length):
        self.sequence_length = sequence_length
        self.xlstm_model = XLSTMRLModel(input_shape=(self.sequence_length, len(feature_columns)))
        self.xlstm_model.load_model(xlstm_model_path, 'models/xlstm_rl_scaler.pkl')
        
        self.rl_agent = IntelligentRLAgent()
        if rl_agent_path: # <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å
            self.rl_agent.load_agent(rl_agent_path)
        else:
            print("‚ö†Ô∏è RL –∞–≥–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –æ–±—É—á–µ–Ω).")
        
        self.feature_columns = feature_columns
        self.decision_history = []
        
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_position = 0
        self.current_balance = 10000
        self.steps_in_position = 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤
        self.regime_detector = MarketRegimeDetector()
        self.current_regime = 'UNKNOWN'
        self.regime_confidence = 0.0
        
    def fit_regime_detector(self, historical_df, xlstm_model, xlstm_feature_columns):
        """–û–±—É—á–∞–µ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.regime_detector.set_xlstm_context(xlstm_model, xlstm_feature_columns)
            self.regime_detector.fit(historical_df)
            print("‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –æ–±—É—á–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤: {e}")
    
    def get_decision(self, df_sequence, confidence_threshold=0.6):
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
        """
        if len(df_sequence) < self.sequence_length:
            return 'HOLD'
            
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥
            adaptive_threshold = self._calculate_adaptive_threshold(df_sequence)
            print(f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥: {adaptive_threshold:.3f} (–±–∞–∑–æ–≤—ã–π: {confidence_threshold:.3f})")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ
            final_threshold = max(adaptive_threshold, confidence_threshold)
            
            # === –®–ê–ì 0: –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–´–ù–û–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê ===
            if self.regime_detector.is_fitted:
                self.current_regime, self.regime_confidence = self.regime_detector.predict_regime(df_sequence)
                regime_params = self.regime_detector.get_regime_trading_params(self.current_regime)
                regime_threshold = regime_params['confidence_threshold']
                
                # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Ä–æ–≥–∏
                final_threshold = max(final_threshold, regime_threshold)
                print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π + —Ä–µ–∂–∏–º): {final_threshold:.3f}")
            
            # === –®–ê–ì 1: xLSTM –ê–ù–ê–õ–ò–ó ===
            sequence_data = df_sequence.tail(self.sequence_length)[self.feature_columns].values
            sequence_reshaped = sequence_data.reshape(1, self.sequence_length, len(self.feature_columns))
            
            xlstm_prediction = self.xlstm_model.predict(sequence_reshaped)[0]
            xlstm_decision_idx = np.argmax(xlstm_prediction)
            xlstm_confidence = np.max(xlstm_prediction)
            
            print(f"xLSTM: BUY={xlstm_prediction[0]:.3f}, SELL={xlstm_prediction[1]:.3f}, HOLD={xlstm_prediction[2]:.3f}")
            
            # === –®–ê–ì 2: VSA –ê–ù–ê–õ–ò–ó ===
            latest_row = df_sequence.iloc[-1]
            vsa_signals = self._analyze_vsa_context(latest_row)
            
            print(f"VSA –°–∏–≥–Ω–∞–ª—ã: {vsa_signals}")
            
            # === –®–ê–ì 3: RL –ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–Ø ===
            rl_observation = self._create_rl_observation(xlstm_prediction, latest_row)
            rl_action = self.rl_agent.predict(rl_observation, deterministic=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RL –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ä–µ—à–µ–Ω–∏–µ
            rl_decision = ['SELL', 'BUY', 'HOLD'][rl_action]
            
            print(f"RL –†–µ—à–µ–Ω–∏–µ: {rl_decision}")

            # === –®–ê–ì 4: –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –° –£–ß–ï–¢–û–ú VSA ===
            final_decision = self._make_final_decision(
                xlstm_prediction, xlstm_confidence,
                vsa_signals, rl_decision, final_threshold
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.decision_history.append({
                'xlstm_prediction': xlstm_prediction,
                'xlstm_confidence': xlstm_confidence,
                'vsa_signals': vsa_signals,
                'rl_decision': rl_decision,
                'final_decision': final_decision,
                'market_regime': self.current_regime,
                'regime_confidence': self.regime_confidence
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
            self._update_state(final_decision)
            
            return final_decision
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è: {e}")
            return 'HOLD'
    
    def _analyze_vsa_context(self, row):
        """VSA –æ—Ç–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã."""
        return {
            'bullish_strength': 0,
            'bearish_strength': 0,
            'uncertainty': 0,
            'volume_confirmation': False
        }
    
    def _create_rl_observation(self, xlstm_prediction, latest_row):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –¥–ª—è RL –∞–≥–µ–Ω—Ç–∞ (–±–µ–∑ VSA)"""
        # VSA –ø—Ä–∏–∑–Ω–∞–∫–∏ —É–¥–∞–ª–µ–Ω—ã, –ø–æ—ç—Ç–æ–º—É —Ä–∞–∑–º–µ—Ä –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —É–º–µ–Ω—å—à–∏—Ç—Å—è.
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TradingEnvRL —Ç–∞–∫–∂–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.
        
        portfolio_state = np.array([
            self.current_balance / 10000,  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            self.current_position,  # -1, 0, 1
            0,  # –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            self.steps_in_position / 100.0
        ])
        
        return np.concatenate([xlstm_prediction, portfolio_state]) # –ò–ó–ú–ï–ù–ï–ù–û: –ë–µ–∑ vsa_features
    
    def _make_final_decision(self, xlstm_pred, xlstm_conf, vsa_signals, rl_decision, threshold):
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        
        # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å xLSTM –Ω–∏–∑–∫–∞—è, –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ RL
        if xlstm_conf < threshold:
            print(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å xLSTM ({xlstm_conf:.3f}), –∏—Å–ø–æ–ª—å–∑—É–µ–º RL: {rl_decision}")
            return rl_decision
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º xLSTM —Ä–µ—à–µ–Ω–∏–µ
        xlstm_decision = ['BUY', 'SELL', 'HOLD'][np.argmax(xlstm_pred)]
        
        # –ï—Å–ª–∏ xLSTM –∏ RL —Å–æ–≥–ª–∞—Å–Ω—ã, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if xlstm_decision == rl_decision:
            print(f"xLSTM –∏ RL —Å–æ–≥–ª–∞—Å–Ω—ã: {xlstm_decision}")
            return xlstm_decision
        
        # –ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã, –∏ xLSTM —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è, –¥–æ–≤–µ—Ä—è–µ–º xLSTM
        if xlstm_conf >= threshold + 0.1: # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
            print(f"xLSTM —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({xlstm_conf:.3f}) –≤—ã—à–µ RL, —Ä–µ—à–µ–Ω–∏–µ: {xlstm_decision}")
            return xlstm_decision
        
        # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º RL —Ä–µ—à–µ–Ω–∏–µ (–∏–ª–∏ HOLD, –µ—Å–ª–∏ RL –Ω–µ —É–≤–µ—Ä–µ–Ω)
        print(f"xLSTM –∏ RL –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã, –¥–æ–≤–µ—Ä—è–µ–º RL: {rl_decision}")
        return rl_decision
    
    def _update_state(self, decision):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π"""
        if decision in ['BUY', 'SELL'] and self.current_position == 0:
            self.current_position = 1 if decision == 'BUY' else -1
            self.steps_in_position = 0
        elif decision in ['BUY', 'SELL'] and self.current_position != 0:
            self.current_position = 0
            self.steps_in_position = 0
        else:
            self.steps_in_position += 1
    
    def get_decision_explanation(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        if not self.decision_history:
            return "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—à–µ–Ω–∏–π"
        
        last_decision = self.decision_history[-1]
        
        explanation = f"""
        === –û–ë–™–Ø–°–ù–ï–ù–ò–ï –†–ï–®–ï–ù–ò–Ø ===
        –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {last_decision['final_decision']}
        
        xLSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:
        - BUY: {last_decision['xlstm_prediction'][0]:.3f}
        - SELL: {last_decision['xlstm_prediction'][1]:.3f} 
        - HOLD: {last_decision['xlstm_prediction'][2]:.3f}
        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {last_decision['xlstm_confidence']:.3f}
        
        - –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        
        RL —Ä–µ—à–µ–Ω–∏–µ: {last_decision['rl_decision']}
        """
        
        return explanation
    def _calculate_adaptive_threshold(self, df_sequence):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        """
        if len(df_sequence) < self.sequence_length:
            return 0.6
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        returns = df_sequence['close'].pct_change().dropna()
        volatility = returns.std()
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥: –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –≤—ã—à–µ –ø–æ—Ä–æ–≥
        base_threshold = 0.6
        volatility_adjustment = min(volatility * 10, 0.2)  # –ú–∞–∫—Å–∏–º—É–º +0.2
        
        adaptive_threshold = base_threshold + volatility_adjustment
        return min(adaptive_threshold, 0.85)  # –ú–∞–∫—Å–∏–º—É–º 0.85