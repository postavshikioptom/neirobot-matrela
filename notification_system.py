import json
import requests
import smtplib
from email.mime.text import MIMEText
from datetime import datetime

class NotificationSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞
    """
    
    def __init__(self, config_file='notification_config.json'):
        self.config = self._load_config(config_file)
        
    def _load_config(self, config_file):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            with open(config_file, 'r') as f:
                return json.load(f)
        except:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_config = {
                "telegram": {
                    "enabled": False,
                    "bot_token": "",
                    "chat_id": ""
                },
                "email": {
                    "enabled": False,
                    "smtp_server": "smtp.gmail.com",
                    "smtp_port": 587,
                    "email": "",
                    "password": "",
                    "to_email": ""
                },
                "webhook": {
                    "enabled": False,
                    "url": ""
                }
            }
            
            with open(config_file, 'w') as f:
                json.dump(default_config, f, indent=2)
                
            print(f"üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {config_file}")
            return default_config
    
    def send_trade_alert(self, symbol, action, price, pnl=None, reason=""):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        if action == "OPEN":
            message = f"üöÄ [{timestamp}] –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol}\nüí∞ –¶–µ–Ω–∞: {price}\nüìä –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        else:
            pnl_emoji = "üìà" if pnl > 0 else "üìâ"
            message = f"{pnl_emoji} [{timestamp}] –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol}\nüí∞ –¶–µ–Ω–∞: {price}\nüíµ PnL: {pnl:.2f}%\nüìä –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        
        self._send_notification(message, priority="normal")
    
    def send_system_alert(self, message, priority="high"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        full_message = f"‚ö†Ô∏è [{timestamp}] –°–ò–°–¢–ï–ú–ê: {message}"
        self._send_notification(full_message, priority)
    
    def send_performance_report(self, daily_stats):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        win_rate = (daily_stats['winning_trades'] / max(daily_stats['trades_closed'], 1)) * 100
        
        message = f"""üìä –î–ù–ï–í–ù–û–ô –û–¢–ß–ï–¢
üïê –î–∞—Ç–∞: {daily_stats['date']}
üìà –°–¥–µ–ª–æ–∫: {daily_stats['trades_closed']}
üí∞ PnL: {daily_stats['total_pnl']:.2f}%
üéØ Win Rate: {win_rate:.1f}%
‚úÖ VSA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {daily_stats['vsa_confirmed_trades']}"""
        
        self._send_notification(message, priority="low")
    
    def _send_notification(self, message, priority="normal"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
        if self.config['telegram']['enabled']:
            self._send_telegram(message)
            
        if self.config['email']['enabled'] and priority in ["high", "critical"]:
            self._send_email(message)
            
        if self.config['webhook']['enabled']:
            self._send_webhook(message, priority)
    
    def _send_telegram(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            bot_token = self.config['telegram']['bot_token']
            chat_id = self.config['telegram']['chat_id']
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            requests.post(url, data=data, timeout=10)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
    
    def _send_email(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            config = self.config['email']
            
            msg = MIMEText(message)
            msg['Subject'] = 'Trading Bot Alert'
            msg['From'] = config['email']
            msg['To'] = config['to_email']
            
            server = smtplib.SMTP(config['smtp_server'], config['smtp_port'])
            server.starttls()
            server.login(config['email'], config['password'])
            server.send_message(msg)
            server.quit()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
    
    def _send_webhook(self, message, priority):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            url = self.config['webhook']['url']
            data = {
                'message': message,
                'priority': priority,
                'timestamp': datetime.now().isoformat()
            }
            
            requests.post(url, json=data, timeout=10)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {e}")