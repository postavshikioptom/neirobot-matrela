import time
import os
import json
import pandas as pd
import numpy as np
from pybit.unified_trading import HTTP
import logging
from functools import wraps
import psutil
import gc

# === –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ ===
import config
import feature_engineering
import trade_manager
import trade_logger
from hybrid_decision_maker import HybridDecisionMaker
from performance_monitor import PerformanceMonitor
from notification_system import NotificationSystem

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
TRADER_STATUS_FILE = 'trader_status.txt'
ACTIVE_POSITIONS_FILE = 'active_positions.json'
LIVE_DATA_FILE = 'live_data.json'
HOTLIST_FILE = 'hotlist.txt'
LOG_FILE = 'trade_log.csv'
LOOP_SLEEP_SECONDS = 3
OPEN_TRADE_LIMIT = 1000
TAKE_PROFIT_PCT = 1.5  # –£–≤–µ–ª–∏—á–∏–ª–∏ TP
STOP_LOSS_PCT = -1.0   # –£–º–µ–Ω—å—à–∏–ª–∏ SL
CONFIDENCE_THRESHOLD = 0.65  # –ü–æ–≤—ã—Å–∏–ª–∏ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
#SEQUENCE_LENGTH = 10

# üî• –ù–û–í–´–ï FEATURE_COLUMNS - –¢–û–õ–¨–ö–û –ò–ù–î–ò–ö–ê–¢–û–†–´
FEATURE_COLUMNS = [
    # ‚úÖ –í–°–ï –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ (–ë–ï–ó –ë–û–õ–õ–ò–ù–î–ñ–ï–†–ê –ò ATR_14)
    'RSI_14', 'MACD_12_26_9', 'MACD_signal', 'MACD_hist',
    'ADX_14', 'STOCHk_14_3_3', 'STOCHd_14_3_3',
    'WILLR_14', # üî• –ù–û–í–´–ô –ò–ù–î–ò–ö–ê–¢–û–†
    'AO_5_34',  # üî• –ù–û–í–´–ô –ò–ù–î–ò–ö–ê–¢–û–†
    
    # ‚ùå –í–°–ï –ü–ê–¢–¢–ï–†–ù–´ –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´
    # 'CDLHAMMER', 'CDLENGULFING', 'CDLDOJI', 'CDLSHOOTINGSTAR',
    # 'CDLHANGINGMAN', 'CDLMARUBOZU',
    # 'CDLINVERTEDHAMMER', 'CDLDRAGONFLYDOJI', 'CDLBELTHOLD',
    # 'hammer_f', 'hangingman_f', 'engulfing_f', 'doji_f',
    # 'shootingstar_f', 'bullish_marubozu_f',
    # 'inverted_hammer_f', 'dragonfly_doji_f', 'bullish_pin_bar_f', 'bullish_belt_hold_f',
    
    # ‚úÖ –û–°–¢–ê–í–õ–Ø–ï–ú EVENT SAMPLING
    'is_event'
]

opened_trades_counter = 0

performance_monitor = None
notification_system = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log'),
        logging.StreamHandler()
    ]
)

def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
            if 'notification_system' in globals():
                notification_system.send_system_alert(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
            return None
    return wrapper

@error_handler
def manage_active_positions(session, decision_maker):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π"""
    active_positions = load_active_positions()
    if not active_positions:
        return

    print(f"–û—Ç–∫—Ä—ã—Ç–æ —Å–¥–µ–ª–æ–∫: {opened_trades_counter}/{OPEN_TRADE_LIMIT}. –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(active_positions)}")
    
    kline_cache = {}
    symbols_to_remove = []
    positions_items = list(active_positions.items())
    displayed_positions = positions_items[:5]
    remaining_count = len(positions_items) - 5 if len(positions_items) > 5 else 0
    
    if remaining_count > 0:
        print(f"  ... –∏ –µ—â–µ {remaining_count} –ø–æ–∑–∏—Ü–∏–π (—Å–∫—Ä—ã—Ç–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤)")

    for i, (symbol, pos) in enumerate(positions_items):
        try:
            if symbol not in kline_cache:
                kline_list = trade_manager.fetch_initial_data(session, symbol)
                if not kline_list:
                    continue
                kline_cache[symbol] = pd.DataFrame(kline_list, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'turnover'])
            
            kline_df = kline_cache[symbol].copy()
            
            # === –ù–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –° VSA ===
            features_df = feature_engineering.calculate_features(kline_df.copy())
            # features_df = feature_engineering.detect_candlestick_patterns(features_df) # üî• –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
            # features_df = feature_engineering.calculate_vsa_features(features_df)  # <--- –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
            
            if features_df.empty or len(features_df) < config.SEQUENCE_LENGTH:
                continue

            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –≥–∏–±—Ä–∏–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            decision = decision_maker.get_decision(features_df.tail(15), confidence_threshold=CONFIDENCE_THRESHOLD)

            latest_price = float(features_df.iloc[-1]['close'])
            entry_price = float(pos['entry_price'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
            if pos['side'] == 'BUY':
                pnl_pct = ((latest_price - entry_price) / entry_price) * 100
            else:  # SELL
                pnl_pct = ((entry_price - latest_price) / entry_price) * 100

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –ø–æ–∑–∏—Ü–∏–π
            if i < 5:
                print(f"  - {symbol}: PnL {pnl_pct:.2f}% | –í—Ö–æ–¥: {entry_price} | –°–µ–π—á–∞—Å: {latest_price} | –†–µ—à–µ–Ω–∏–µ: {decision}")

            # === –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–´–•–û–î–ê –° –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ú–ò –°–¢–û–ü–ê–ú–ò ===
            should_close = False
            close_reason = ""
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø—ã
            dynamic_sl, dynamic_tp = calculate_dynamic_stops(features_df.iloc[-1], pos['side'], entry_price)
            
            print(f"  üìä –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è {symbol}: TP={dynamic_tp:.2f}%, SL={dynamic_sl:.2f}%")
            
            # 1. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if pnl_pct >= dynamic_tp:
                should_close = True
                close_reason = f"DYNAMIC_TP ({pnl_pct:.2f}%)"
            elif pnl_pct <= dynamic_sl:
                should_close = True
                close_reason = f"DYNAMIC_SL ({pnl_pct:.2f}%)"
            
            # 2. –°–∏–≥–Ω–∞–ª –º–æ–¥–µ–ª–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            elif (pos['side'] == 'BUY' and decision == 'SELL') or (pos['side'] == 'SELL' and decision == 'BUY'):
                should_close = True
                close_reason = f"MODEL_SIGNAL ({decision})"
            
            # 3. VSA —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ (–æ—Ç–∫–ª—é—á–µ–Ω)
            # elif should_close_by_vsa(features_df.iloc[-1], pos['side']): # <--- –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
            #     should_close = True
            #     close_reason = "VSA_SIGNAL"
            
            if should_close:
                print(f"!!! {symbol}: {close_reason}. –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é... !!!")
                
                close_result = trade_manager.close_market_position(session, symbol, pos['quantity'], pos['side'])
                if close_result.get('status') == 'SUCCESS':
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏—è
                    trade_logger.log_enhanced_trade_with_quality_metrics(symbol, 'CLOSE', close_result, pos, pnl_pct,
                                     decision_maker, features_df.iloc[-1], close_reason)
                    notification_system.send_trade_alert(symbol, "CLOSE", close_result['price'], pnl_pct, reason=close_reason)
                    performance_monitor.log_trade_closed(symbol, pnl_pct)
                    symbols_to_remove.append(symbol)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–µ–π {symbol}: {e}")

    # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    if symbols_to_remove:
        current_positions = load_active_positions()
        for symbol in symbols_to_remove:
            if symbol in current_positions: 
                del current_positions[symbol]
        save_active_positions(current_positions)


@error_handler
def process_new_signal(session, symbol, decision_maker):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å VSA –∞–Ω–∞–ª–∏–∑–æ–º"""
    global opened_trades_counter
    
    if opened_trades_counter >= OPEN_TRADE_LIMIT: 
        return
    
    active_positions = load_active_positions()
    if symbol in active_positions: 
        return

    print(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol} (—Å VSA –∞–Ω–∞–ª–∏–∑–æ–º) ---")
    
    try:
        with open(LIVE_DATA_FILE, 'r') as f: 
            live_data = json.load(f)
        
        symbol_data = live_data.get(symbol)
        if not symbol_data: 
            return

        kline_list = symbol_data.get('klines')
        if not kline_list or len(kline_list) < config.REQUIRED_CANDLES: 
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å VSA
        kline_df = pd.DataFrame(kline_list, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'turnover'])
        
        # === –ü–û–õ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –° VSA ===
        features_df = feature_engineering.calculate_features(kline_df.copy())
        # features_df = feature_engineering.detect_candlestick_patterns(features_df) # üî• –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        # features_df = feature_engineering.calculate_vsa_features(features_df) # <--- –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        
        if features_df.empty or len(features_df) < config.SEQUENCE_LENGTH:
            return

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–∏–±—Ä–∏–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        decision = decision_maker.get_decision(features_df.tail(15), confidence_threshold=CONFIDENCE_THRESHOLD)
        
        print(f"--- {symbol} | –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {decision} ---")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        if hasattr(decision_maker, 'get_decision_explanation'):
            explanation = decision_maker.get_decision_explanation()
            print(explanation)

        if decision in ['BUY', 'SELL']:
            # –ù–û–í–´–ô –ö–û–î - –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ –±–µ–∑ VSA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ VSA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω–∞)
    # if validate_decision_with_vsa(features_df.iloc[-1], decision): # <--- –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
            open_result = trade_manager.open_market_position(session, decision, symbol)
    
            if open_result.get('status') == 'SUCCESS':
                performance_monitor.log_trade_opened(symbol, decision, vsa_confirmed=False) # –ò–ó–ú–ï–ù–ï–ù–û: vsa_confirmed=False
        # –õ–æ–≥–∏—Ä—É–µ–º —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                notification_system.send_trade_alert(symbol, "OPEN", open_result['price'], reason=f"MODEL_DECISION_{decision}") # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–∏—á–∏–Ω–∞
                trade_logger.log_enhanced_trade_with_quality_metrics(symbol, 'OPEN', open_result, None, 0,
                                 decision_maker, features_df.iloc[-1], f"MODEL_DECISION_{decision}") # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–∏—á–∏–Ω–∞
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                active_positions = load_active_positions()
                active_positions[symbol] = {
                    'side': decision,
                    'entry_price': open_result['price'],
                    'quantity': open_result['quantity'],
                    'timestamp': time.time(),
                    'duration': 0,
            # 'vsa_entry_strength': features_df.iloc[-1]['vsa_strength']  # <--- –£–î–ê–õ–ï–ù–û: VSA —Å–∏–ª–∞ –≤—Ö–æ–¥–∞
                }
                save_active_positions(active_positions)
        
                opened_trades_counter += 1
                print(f"‚úÖ –°–¥–µ–ª–∫–∞ #{opened_trades_counter}/{OPEN_TRADE_LIMIT} –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.") # –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ
        
                if opened_trades_counter >= OPEN_TRADE_LIMIT:
                    print("!!! –î–û–°–¢–ò–ì–ù–£–¢ –õ–ò–ú–ò–¢ –û–¢–ö–†–´–¢–´–• –°–î–ï–õ–û–ö !!!")
                    set_trader_status('MANAGING_ONLY')
    # else: # <--- –£–î–ê–õ–ï–ù–û: –ë–ª–æ–∫ else –¥–ª—è VSA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    #     print(f"‚ùå VSA –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ {decision} –¥–ª—è {symbol}")

    except Exception as e:
        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e} !!!")



def run_trading_loop():
    """–ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    global performance_monitor, notification_system
    print("=== –ó–ê–ü–£–°–ö –ù–û–í–û–ì–û –¢–†–ï–ô–î–ò–ù–ì-–ë–û–¢–ê: xLSTM + VSA + RL ===")
    
    performance_monitor = PerformanceMonitor()
    notification_system = NotificationSystem()

    # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if os.path.exists(ACTIVE_POSITIONS_FILE):
        os.remove(ACTIVE_POSITIONS_FILE)
        print(f"–§–∞–π–ª {ACTIVE_POSITIONS_FILE} –æ—á–∏—â–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
    session = HTTP(testnet=True, api_key=config.BYBIT_API_KEY, api_secret=config.BYBIT_API_SECRET)
    session.endpoint = config.API_URL
    
    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–û–í–û–ô –ì–ò–ë–†–ò–î–ù–û–ô –°–ò–°–¢–ï–ú–´ ===
    try:
        decision_maker = HybridDecisionMaker(
            xlstm_model_path='models/xlstm_rl_model.keras',
            rl_agent_path='models/rl_agent_BTCUSDT',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            feature_columns=FEATURE_COLUMNS,
            sequence_length=config.SEQUENCE_LENGTH
        )
        print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ xLSTM + VSA + RL —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        
        try:
            decision_maker.regime_detector.load_detector('models/market_regime_detector.pkl')
            print("‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except:
            print("‚ö†Ô∏è –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –æ–±—É—á–µ–Ω –∑–∞–Ω–æ–≤–æ")
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç:")
        print("- models/xlstm_rl_model.keras")
        print("- models/xlstm_rl_scaler.pkl")
        print("- models/rl_agent_BTCUSDT.zip")
        return

    # –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
    loop_counter = 0
    while True:
        status = get_trader_status()
        if status == 'STOP':
            print("–¢—Ä–µ–π–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã—Ö–æ–¥.")
            break
        
        try:
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            manage_active_positions(session, decision_maker)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            if get_trader_status() == 'BUSY':
                print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª 'BUSY'.")
                with open(HOTLIST_FILE, 'r') as f: 
                    symbol = f.read().strip()
                
                if symbol: 
                    process_new_signal(session, symbol, decision_maker)
                
                if opened_trades_counter < OPEN_TRADE_LIMIT:
                    set_trader_status('DONE')
                else:
                    set_trader_status('MANAGING_ONLY')
            
            # –ö–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            loop_counter += 1
            if loop_counter % 10 == 0:
                print(f"\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–¶–∏–∫–ª {loop_counter}) ===")
                print(f"–û—Ç–∫—Ä—ã—Ç–æ —Å–¥–µ–ª–æ–∫: {opened_trades_counter}/{OPEN_TRADE_LIMIT}")
                print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(load_active_positions())}")
                print(f"–°—Ç–∞—Ç—É—Å: {get_trader_status()}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
                if hasattr(decision_maker, 'get_decision_explanation'):
                    explanation = decision_maker.get_decision_explanation()
                    print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ—à–µ–Ω–∏–µ:\n{explanation}")

        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            import traceback
            traceback.print_exc()

        if loop_counter % 100 == 0:
            system_stats = monitor_system_resources()
            if system_stats['memory'] > 85:
                notification_system.send_system_alert(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {system_stats['memory']:.1f}%")
        time.sleep(LOOP_SLEEP_SECONDS)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
def get_trader_status():
    try:
        with open(TRADER_STATUS_FILE, 'r') as f: 
            return f.read().strip()
    except FileNotFoundError: 
        return 'DONE'

def set_trader_status(status):
    with open(TRADER_STATUS_FILE, 'w') as f: 
        f.write(status)

def load_active_positions():
    if not os.path.exists(ACTIVE_POSITIONS_FILE): 
        return {}
    try:
        with open(ACTIVE_POSITIONS_FILE, 'r') as f: 
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError): 
        return {}

def save_active_positions(positions):
    with open(ACTIVE_POSITIONS_FILE, 'w') as f: 
        json.dump(positions, f, indent=4)

def monitor_system_resources():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    memory_percent = psutil.virtual_memory().percent
    cpu_percent = psutil.cpu_percent()
    
    if memory_percent > 80:
        print(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent:.1f}%")
        gc.collect()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        
    if cpu_percent > 90:
        print(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%")
        
    return {'memory': memory_percent, 'cpu': cpu_percent}

if __name__ == '__main__':
    run_trading_loop()

def calculate_dynamic_stops(features_row, position_side, entry_price):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å AO_5_34)
    """
    base_sl = STOP_LOSS_PCT
    base_tp = TAKE_PROFIT_PCT
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–º–µ–Ω—Ç—É–º–∞ (AO_5_34)
    ao_value = features_row.get('AO_5_34', 0)
    close_price = features_row.get('close', entry_price)
    
    if close_price > 0:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ AO –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–º–µ–Ω—Ç—É–º–∞
        ao_abs_pct = (abs(ao_value) / close_price) * 100
    else:
        ao_abs_pct = 0

    # –ï—Å–ª–∏ AO –±–æ–ª—å—à–æ–π (—Å–∏–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç—É–º), –¥–µ–ª–∞–µ–º —Å—Ç–æ–ø—ã —à–∏—Ä–µ
    if ao_abs_pct > 0.1: # –ü–æ—Ä–æ–≥ –¥–ª—è AO_abs_pct –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å
        dynamic_sl = base_sl * (1 + ao_abs_pct * 5) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º SL —Å–∏–ª—å–Ω–µ–µ
        dynamic_tp = base_tp * (1 + ao_abs_pct * 2) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º TP (–∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ–º, –µ—Å–ª–∏ AO –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)
    else:
        dynamic_sl, dynamic_tp = base_sl, base_tp
        
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    dynamic_sl = max(dynamic_sl, -3.0)
    dynamic_tp = min(dynamic_tp, 3.0)

    return dynamic_sl, dynamic_tp
