import os
import sys
import time
# import logging # üî• –£–î–ê–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç logging
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import tensorflow as tf
from pybit.unified_trading import HTTP

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from feature_engineering import FeatureEngineering
from models.xlstm_rl_model import XLSTMRLModel
from hybrid_decision_maker import HybridDecisionMaker
from trade_manager import TradeManager
from rl_agent import RLAgent
import config

# üî• –£–î–ê–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     level=logging.INFO,
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#     handlers=[
#         logging.StreamHandler(),
#         logging.FileHandler('live_trading.log')
#     ]
# )
# logger = logging.getLogger('live_trading')

def fetch_latest_data(session, symbol, timeframe, limit=100):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ —Å –±–∏—Ä–∂–∏"""
    try:
        response = session.get_kline(
            category="linear",
            symbol=symbol,
            interval=timeframe,
            limit=limit
        )
        
        if response['retCode'] == 0:
            data = response['result']['list']
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume', 'turnover'
            ])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            numeric_columns = ['open', 'high', 'low', 'close', 'volume', 'turnover']
            for col in numeric_columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            
            # –ù–ï –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —á–∏—Å–ª–æ
            df['timestamp'] = pd.to_numeric(df['timestamp'])
            df['symbol'] = symbol
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df.sort_values('timestamp', inplace=True)
            
            return df
        else:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.error -> print
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {response['retMsg']}")
            return None
    
    except Exception as e:
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.error -> print
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∂–∏–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.info -> print
    print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ñ–ò–í–û–ô –¢–û–†–ì–û–í–õ–ò –° –¢–†–Å–•–≠–¢–ê–ü–ù–û–ô –ú–û–î–ï–õ–¨–Æ")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    api_key = config.BYBIT_API_KEY
    api_secret = config.BYBIT_API_SECRET
    api_url = config.API_URL
    symbol = config.SYMBOLS[0]
    timeframe = config.TIMEFRAME
    order_amount = config.ORDER_USDT_AMOUNT
    leverage = config.LEVERAGE
    sequence_length = config.SEQUENCE_LENGTH
    required_candles = config.REQUIRED_CANDLES
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
    session = HTTP(
        testnet=(api_url == "https://api-demo.bybit.com"),
        api_key=api_key,
        api_secret=api_secret
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    feature_engineering = FeatureEngineering(sequence_length=sequence_length)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–µ–π–ª–µ—Ä
    if not feature_engineering.load_scaler():
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.error -> print
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–µ–π–ª–µ—Ä. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç—Ä—ë—Ö—ç—Ç–∞–ø–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    input_shape = (sequence_length, len(feature_engineering.feature_columns))
    rl_model = XLSTMRLModel(input_shape=input_shape, 
                          memory_size=config.XLSTM_MEMORY_SIZE, 
                          memory_units=config.XLSTM_MEMORY_UNITS)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    try:
        rl_model.load(stage="_rl_finetuned")
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.info -> print
        print("‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä—ë—Ö—ç—Ç–∞–ø–Ω–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.error -> print
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å: {e}")
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.info -> print
        print("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ supervised –º–æ–¥–µ–ª–∏...")
        try:
            rl_model.load(stage="_supervised")
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.info -> print
            print("‚úÖ Supervised –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞–∫ fallback")
        except Exception as e2:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.error -> print
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏–∫–∞–∫—É—é –º–æ–¥–µ–ª—å: {e2}")
            return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RL-–∞–≥–µ–Ω—Ç–∞
    rl_agent = RLAgent(state_shape=input_shape, 
                      memory_size=config.XLSTM_MEMORY_SIZE, 
                      memory_units=config.XLSTM_MEMORY_UNITS)
    rl_agent.model = rl_model
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
    decision_maker = HybridDecisionMaker(rl_agent)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
    trade_manager = TradeManager(
        api_key=api_key,
        api_secret=api_secret,
        api_url=api_url,
        order_amount=order_amount,
        symbol=symbol,
        leverage=leverage
    )
    
    # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.info -> print
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é...")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            current_time = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = fetch_latest_data(session, symbol, timeframe, limit=required_candles)
            
            if df is None or len(df) < sequence_length:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.error -> print
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ª—É—á–µ–Ω–æ: {len(df) if df is not None else 0} —Å—Ç—Ä–æ–∫")
                time.sleep(10)
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            X, _, _ = feature_engineering.prepare_test_data(df)
            
            if len(X) == 0:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.error -> print
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                time.sleep(10)
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            current_state = X[-1]
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ (–ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ç—Ä–µ–π–¥-–º–µ–Ω–µ–¥–∂–µ—Ä–∞)
            action, confidence = decision_maker.make_decision(
                current_state,
                position=trade_manager.position
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
            action_names = {0: "BUY", 1: "HOLD", 2: "SELL"}
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.info -> print
            print(f"üìä –†–µ—à–µ–Ω–∏–µ: {action_names[action]} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.4f})")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
            explanation = decision_maker.explain_decision(current_state)
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.info -> print
            print(f"üß† –ê–Ω–∞–ª–∏–∑: BUY={explanation['all_probs']['BUY']:.3f}, "
                       f"HOLD={explanation['all_probs']['HOLD']:.3f}, "
                       f"SELL={explanation['all_probs']['SELL']:.3f}, "
                       f"Value={explanation['state_value']:.4f}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if trade_manager.place_order(action):
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.info -> print
                print(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {action_names[action]}")
            else:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.error -> print
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä: {action_names[action]}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
            position_info = trade_manager.get_position_info()
            if position_info and position_info['size'] > 0:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.info -> print
                print(f"üí∞ –ü–æ–∑–∏—Ü–∏—è: {position_info['side']} {position_info['size']}, "
                           f"PnL: {position_info['unrealised_pnl']}")
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
            time.sleep(30)
            
        except KeyboardInterrupt:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.info -> print
            print("‚èπÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: logger.error -> print
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            time.sleep(10)

if __name__ == "__main__":
    main()