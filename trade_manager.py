import numpy as np
import pandas as pd
from pybit.unified_trading import HTTP
import time
# import logging # üî• –£–î–ê–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç logging
import json
from datetime import datetime
import os

class TradeManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π –Ω–∞ –±–∏—Ä–∂–µ Bybit
    """
    def __init__(self, api_key, api_secret, api_url, order_amount, symbol, leverage="2"):
        self.api_key = api_key
        self.api_secret = api_secret
        self.api_url = api_url
        self.order_amount = order_amount
        self.symbol = symbol
        self.leverage = leverage
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
        self.session = HTTP(
            testnet=(api_url == "https://api-testnet.bybit.com"),
            api_key=api_key,
            api_secret=api_secret
        )
        
        # üî• –£–î–ê–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        # self.logger = logging.getLogger('trade_manager')
        # self.logger.setLevel(logging.INFO)
        # if not self.logger.handlers:
        #     handler = logging.StreamHandler()
        #     formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        #     handler.setFormatter(formatter)
        #     self.logger.addHandler(handler)
            
        #     file_handler = logging.FileHandler('trading.log')
        #     file_handler.setFormatter(formatter)
        #     self.logger.addHandler(file_handler)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞
        self.trade_log = []
        self.position = 0  # 0 - –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏, 1 - –¥–ª–∏–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, -1 - –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
        self._set_leverage()
    
    def _set_leverage(self):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–µ—á–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        try:
            response = self.session.set_leverage(
                category="linear",
                symbol=self.symbol,
                buyLeverage=self.leverage,
                sellLeverage=self.leverage
            )
            
            if response['retCode'] == 0:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.info -> print
                print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ {self.leverage} –¥–ª—è {self.symbol}")
            else:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.warning -> print
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ: {response['retMsg']}")
        
        except Exception as e:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {e}")
    
    def get_current_price(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        try:
            response = self.session.get_tickers(
                category="linear",
                symbol=self.symbol
            )
            
            if response['retCode'] == 0:
                price = float(response['result']['list'][0]['lastPrice'])
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.debug -> print
                print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {self.symbol}: {price}")
                return price
            else:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.warning -> print
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É: {response['retMsg']}")
                return None
        
        except Exception as e:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e}")
            return None
    
    def place_order(self, action):
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
        
        action: 0 - BUY, 1 - HOLD, 2 - SELL
        """
        if action == 1:  # HOLD - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return True
        
        try:
            current_price = self.get_current_price()
            
            if current_price is None:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ –∏ —Å—Ç–æ—Ä–æ–Ω—É
            if action == 0:  # BUY
                side = "Buy"
                if self.position == -1:  # –ï—Å–ª–∏ —É –Ω–∞—Å –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
                    # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.info -> print
                    print("–ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–∑–∏—Ü–∏—é")
                    self._close_position()
            elif action == 2:  # SELL
                side = "Sell"
                if self.position == 1:  # –ï—Å–ª–∏ —É –Ω–∞—Å –¥–ª–∏–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
                    # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.info -> print
                    print("–ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é")
                    self._close_position()
            else:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                return False
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            qty = self.order_amount / current_price
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            response = self.session.place_order(
                category="linear",
                symbol=self.symbol,
                side=side,
                orderType="Market",
                qty=str(round(qty, 4)),
                timeInForce="GTC"
            )
            
            if response['retCode'] == 0:
                order_id = response['result']['orderId']
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.info -> print
                print(f"–†–∞–∑–º–µ—â–µ–Ω {side} –æ—Ä–¥–µ—Ä –Ω–∞ {qty} {self.symbol} –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ. ID: {order_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                if action == 0:  # BUY
                    self.position = 1
                elif action == 2:  # SELL
                    self.position = -1
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∂—É—Ä–Ω–∞–ª
                self.trade_log.append({
                    'timestamp': datetime.now().isoformat(),
                    'action': 'BUY' if action == 0 else 'SELL',
                    'price': current_price,
                    'qty': qty,
                    'order_id': order_id
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª
                self._save_trade_log()
                
                return True
            else:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {response['retMsg']}")
                return False
        
        except Exception as e:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False
    
    def _close_position(self):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            response = self.session.get_positions(
                category="linear",
                symbol=self.symbol
            )
            
            if response['retCode'] != 0:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏: {response['retMsg']}")
                return False
            
            position_info = response['result']['list'][0]
            size = float(position_info['size'])
            
            if size == 0:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.info -> print
                print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                self.position = 0
                return True
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            side = "Sell" if position_info['side'] == "Buy" else "Buy"
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            response = self.session.place_order(
                category="linear",
                symbol=self.symbol,
                side=side,
                orderType="Market",
                qty=str(size),
                timeInForce="GTC",
                reduceOnly=True
            )
            
            if response['retCode'] == 0:
                order_id = response['result']['orderId']
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.info -> print
                print(f"–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {self.symbol}. ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
                self.position = 0
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∂—É—Ä–Ω–∞–ª
                self.trade_log.append({
                    'timestamp': datetime.now().isoformat(),
                    'action': 'CLOSE',
                    'price': self.get_current_price(),
                    'qty': size,
                    'order_id': order_id
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª
                self._save_trade_log()
                
                return True
            else:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {response['retMsg']}")
                return False
        
        except Exception as e:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
    
    def get_position_info(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        """
        try:
            response = self.session.get_positions(
                category="linear",
                symbol=self.symbol
            )
            
            if response['retCode'] == 0:
                position_info = response['result']['list'][0]
                return {
                    'symbol': position_info['symbol'],
                    'side': position_info['side'],
                    'size': float(position_info['size']),
                    'entry_price': float(position_info['entryPrice']),
                    'leverage': float(position_info['leverage']),
                    'unrealised_pnl': float(position_info['unrealisedPnl']),
                    'position_value': float(position_info['positionValue'])
                }
            else:
                # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.warning -> print
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏: {response['retMsg']}")
                return None
        
        except Exception as e:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None
    
    def _save_trade_log(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂—É—Ä–Ω–∞–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Ñ–∞–π–ª
        """
        try:
            with open('trade_log.json', 'w') as f:
                json.dump(self.trade_log, f, indent=2)
        except Exception as e:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: self.logger.error -> print
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")