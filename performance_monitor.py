import json
import time
import pandas as pd
from datetime import datetime, timedelta

class PerformanceMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    
    def __init__(self):
        self.stats_file = 'real_time_performance.json'
        self.reset_daily_stats()
    
    def reset_daily_stats(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.daily_stats = {
            'date': datetime.now().strftime('%Y-%m-%d'),
            'trades_opened': 0,
            'trades_closed': 0,
            'total_pnl': 0,
            'winning_trades': 0,
            'losing_trades': 0,
            'model_accuracy': [],
            'start_time': time.time()
        }
    
    def log_trade_opened(self, symbol, decision): # –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª–µ–Ω vsa_confirmed
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ (–±–µ–∑ VSA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"""
        self.daily_stats['trades_opened'] += 1
        # if vsa_confirmed: # <--- –£–î–ê–õ–ï–ù–û
        #     self.daily_stats['vsa_confirmed_trades'] += 1 # <--- –£–î–ê–õ–ï–ù–û
        
        self.save_stats()
    
    def log_trade_closed(self, symbol, pnl_pct, was_correct_prediction=None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏"""
        self.daily_stats['trades_closed'] += 1
        self.daily_stats['total_pnl'] += pnl_pct
        
        if pnl_pct > 0:
            self.daily_stats['winning_trades'] += 1
        else:
            self.daily_stats['losing_trades'] += 1
            
        if was_correct_prediction is not None:
            self.daily_stats['model_accuracy'].append(was_correct_prediction)
        
        self.save_stats()
        self.print_current_stats()
    
    def print_current_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.daily_stats
        win_rate = (stats['winning_trades'] / max(stats['trades_closed'], 1)) * 100
        
        print(f"\nüìä === –î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
        print(f"üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {(time.time() - stats['start_time']) / 3600:.1f} —á–∞—Å–æ–≤")
        print(f"üìà –û—Ç–∫—Ä—ã—Ç–æ —Å–¥–µ–ª–æ–∫: {stats['trades_opened']}")
        print(f"üìâ –ó–∞–∫—Ä—ã—Ç–æ —Å–¥–µ–ª–æ–∫: {stats['trades_closed']}")
        print(f"üí∞ –û–±—â–∏–π PnL: {stats['total_pnl']:.2f}%")
        print(f"üéØ Win Rate: {win_rate:.1f}%")
        # print(f"‚úÖ VSA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {stats['vsa_confirmed_trades']}") # <--- –£–î–ê–õ–ï–ù–û
        
        if stats['model_accuracy']:
            accuracy = sum(stats['model_accuracy']) / len(stats['model_accuracy']) * 100
            print(f"üß† –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.1f}%")
    
    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        with open(self.stats_file, 'w') as f:
            json.dump(self.daily_stats, f, indent=2)