import tensorflow as tf
import numpy as np

class AntiOverfittingCallback(tf.keras.callbacks.Callback):
    """
    –ö–æ–ª–±—ç–∫ –¥–ª—è –±–æ—Ä—å–±—ã —Å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º
    """
    def __init__(self, patience=8, min_improvement=0.005):
        super().__init__()
        self.patience = patience
        self.min_improvement = min_improvement
        self.wait = 0
        self.best_val_loss = np.inf
        
    def on_epoch_end(self, epoch, logs=None):
        val_loss = logs.get('val_loss')
        train_loss = logs.get('loss')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        overfitting_ratio = val_loss / train_loss if train_loss > 0 else 1.0
        
        if overfitting_ratio > 1.3:  # –ï—Å–ª–∏ val_loss > train_loss * 1.3
            print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —ç–ø–æ—Ö–µ {epoch+1}!")
            print(f"   Val_loss/Train_loss = {overfitting_ratio:.2f}")
            
            # –ú—ã –Ω–µ –±—É–¥–µ–º –Ω–∞–ø—Ä—è–º—É—é –º–µ–Ω—è—Ç—å LR, –µ—Å–ª–∏ –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è ReduceLROnPlateau.
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –±—É–¥–µ–º –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ ReduceLROnPlateau –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è LR,
            # –∞ –Ω–∞—à –∫–æ–ª–±—ç–∫ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å overfitting –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.

            # –ï—Å–ª–∏ val_loss —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è, –Ω–∞—à –∫–æ–ª–±—ç–∫ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ,
            # –Ω–æ –Ω–µ –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–º–µ–Ω–∏—Ç—å LR, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ val_loss
        if val_loss < self.best_val_loss - self.min_improvement:
            self.best_val_loss = val_loss
            self.wait = 0
        else:
            self.wait += 1
            
        if self.wait >= self.patience and epoch > 20:  # –ú–∏–Ω–∏–º—É–º 20 —ç–ø–æ—Ö
            print(f"\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ: –Ω–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π {self.patience} —ç–ø–æ—Ö")
            self.model.stop_training = True