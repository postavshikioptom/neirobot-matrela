import numpy as np
import pandas as pd
from scipy.optimize import minimize
import json

class ParameterOptimizer:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self):
        self.performance_history = []
        self.current_params = {
            'confidence_threshold': 0.65,
            'take_profit_pct': 1.5,
            'stop_loss_pct': -1.0,
            'xlstm_weight': 0.6
        }
        
    def record_performance(self, trades_data):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not trades_data:
            return
            
        metrics = {
            'total_return': sum([t['pnl_pct'] for t in trades_data]),
            'win_rate': len([t for t in trades_data if t['pnl_pct'] > 0]) / len(trades_data),
            'max_drawdown': self._calculate_max_drawdown(trades_data),
            'sharpe_ratio': self._calculate_sharpe_ratio(trades_data),
            'total_trades': len(trades_data),
            'timestamp': pd.Timestamp.now(),
            'parameters': self.current_params.copy()
        }
        
        self.performance_history.append(metrics)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self._save_performance_history()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 50 –∑–∞–ø–∏—Å–µ–π
        if len(self.performance_history) % 50 == 0:
            self.optimize_parameters()
    
    def optimize_parameters(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if len(self.performance_history) < 20:
            return
            
        print("\nüîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        bounds = [
            (0.5, 0.9),   # confidence_threshold
            (0.8, 3.0),   # take_profit_pct
            (-3.0, -0.5), # stop_loss_pct
            (0.2, 0.8)    # xlstm_weight
        ]
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        x0 = [
            self.current_params['confidence_threshold'],
            self.current_params['take_profit_pct'],
            abs(self.current_params['stop_loss_pct']),  # –î–µ–ª–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            self.current_params['xlstm_weight']
        ]
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        result = minimize(
            self._objective_function,
            x0,
            bounds=bounds,
            method='L-BFGS-B'
        )
        
        if result.success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            old_params = self.current_params.copy()
            
            self.current_params = {
                'confidence_threshold': result.x[0],
                'take_profit_pct': result.x[1],
                'stop_loss_pct': -result.x[2],  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                'xlstm_weight': result.x[3]
            }
            
            print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            print(f"üìä –°—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {old_params}")
            print(f"üî• –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {self.current_params}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self._save_optimized_parameters()
        else:
            print("‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
    
    def _objective_function(self, params):
        """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Sharpe ratio)"""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        # (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è)
        
        confidence_threshold = params[0]
        take_profit_pct = params[1]
        stop_loss_pct = -params[2]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –ø–æ—Ö–æ–∂–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        similar_periods = []
        for period in self.performance_history[-100:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø–µ—Ä–∏–æ–¥–æ–≤
            param_diff = abs(period['parameters']['confidence_threshold'] - confidence_threshold)
            if param_diff < 0.1:  # –ü–æ—Ö–æ–∂–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                similar_periods.append(period)
        
        if len(similar_periods) < 5:
            return 0  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π Sharpe ratio –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        sharpe_ratios = [p['sharpe_ratio'] for p in similar_periods]
        avg_sharpe = np.mean(sharpe_ratios)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏
        return -avg_sharpe

    def _calculate_max_drawdown(self, trades_data):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É"""
        returns = pd.Series([t['pnl_pct'] for t in trades_data])
        cumulative_returns = (1 + returns / 100).cumprod()
        peak = cumulative_returns.expanding(min_periods=1).max()
        drawdown = (cumulative_returns - peak) / peak
        return drawdown.min()

    def _calculate_sharpe_ratio(self, trades_data, risk_free_rate=0):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞"""
        returns = pd.Series([t['pnl_pct'] for t in trades_data])
        if returns.std() == 0:
            return 0
        return (returns.mean() - risk_free_rate) / returns.std()

    def _save_performance_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª"""
        with open('performance_history.json', 'w') as f:
            json.dump(self.performance_history, f, indent=2, default=str)

    def _save_optimized_parameters(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–∞–π–ª"""
        with open('optimized_params.json', 'w') as f:
            json.dump(self.current_params, f, indent=2)